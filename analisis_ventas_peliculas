import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm

# Cargar los datos de los archivos CSV
ventas_df = pd.read_csv('/workspace/ventas_peliculas.csv')
promociones_df = pd.read_csv('/workspace/promocion_peliculas.csv')

# Ver las primeras filas para entender la estructura
print(ventas_df.head())
print(promociones_df.head())

# Combinación de los DataFrames por las columnas 'fecha' y 'titulo'
datos_combinados = pd.merge(ventas_df, promociones_df, on=['fecha', 'titulo'], how='left', validate="1:m")

# Verificar la estructura de los datos combinados
print(datos_combinados.head())

# Identificar valores nulos
valores_nulos = datos_combinados.isna().sum()
print(valores_nulos)

# Rellenar los valores nulos con 0 (o cualquier otra estrategia que se considere adecuada)
datos_combinados.fillna(0, inplace=True)

# Asegurarse de que la columna 'fecha' sea de tipo datetime
datos_combinados['fecha'] = pd.to_datetime(datos_combinados['fecha'])

# Análisis gráfico de las ventas semanales
ventas_semanales = datos_combinados.groupby(datos_combinados['fecha'].dt.to_period('W'))['ventas_boletos'].sum()

# Graficar las ventas semanales
ventas_semanales.plot(kind='line', figsize=(10, 6))
plt.title('Ventas Semanales de Boletos')
plt.xlabel('Semana')
plt.ylabel('Ventas de Boletos')
plt.grid(True)
plt.show()

# Crear una columna que indique si hubo promoción o no
datos_combinados['promocion'] = datos_combinados['eventos_promocionales'].apply(lambda x: 'Con Promoción' if x > 0 else 'Sin Promoción')

# Graficar las ventas promedio con y sin promoción
ventas_promocion = datos_combinados.groupby('promocion')['ventas_boletos'].mean()

ventas_promocion.plot(kind='bar', color=['green', 'red'], figsize=(8, 6))
plt.title('Ventas Promedio con y sin Promoción')
plt.xlabel('Tipo de Semana')
plt.ylabel('Ventas Promedio de Boletos')
plt.xticks(rotation=0)
plt.show()

# Detección de outliers utilizando un boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=datos_combinados['ventas_boletos'])
plt.title('Detección de Outliers en las Ventas de Boletos')
plt.show()

# Calcular la correlación entre las variables de interés
correlaciones = datos_combinados[['ventas_boletos', 'calificacion', 'eventos_promocionales', 'participacion_promocion']].corr()

# Visualizar la matriz de correlación
plt.figure(figsize=(8, 6))
sns.heatmap(correlaciones, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Matriz de Correlación')
plt.show()

# Definir las variables independientes (X) y la variable dependiente (y)
X = datos_combinados[['calificacion', 'eventos_promocionales', 'participacion_promocion']]
y = datos_combinados['ventas_boletos']

# Añadir una constante para el modelo (intercepto)
X = sm.add_constant(X)

# Entrenar el modelo de regresión lineal
modelo = sm.OLS(y, X).fit()

# Ver el resumen del modelo
print(modelo.summary())

# Realizar predicciones
predicciones = modelo.predict(X)

# Graficar los valores reales frente a los predichos
plt.figure(figsize=(8, 6))
plt.plot(y, label='Ventas Reales', color='blue')
plt.plot(predicciones, label='Ventas Predichas', color='red', linestyle='--')
plt.title('Ventas Reales vs Ventas Predichas')
plt.xlabel('Semana')
plt.ylabel('Ventas de Boletos')
plt.legend()
plt.show()
